#+TITLE: zig-napi
#+DATE: 2025-06-10T21:55:37+0800
#+LASTMOD: 2025-06-22T13:39:44+0800
#+AUTHOR: Jiacai Liu

[[https://github.com/jiacai2050/zig-napi/actions/workflows/CI.yml][https://github.com/jiacai2050/zig-napi/actions/workflows/CI.yml/badge.svg]]
[[https://img.shields.io/badge/zig%20version-0.14.1-blue.svg]]

=zig-napi= is a Zig package that provides a set of bindings to the
[[https://nodejs.org/api/n-api.html][Node-API]] (N-API) for Zig. It allows you to write native Node.js addons in Zig, enabling you to leverage Zig's performance and safety features while interacting with Node.js.

* Features
- Provides a safe and ergonomic API for writing Node.js addons in Zig.
- Supports both synchronous and asynchronous operations(TODO).
- Includes comprehensive error handling and type safety.
- Supports the latest N-API features.
- Comprehensive documentation and examples to help you get started quickly.
- Supports Zig's compile-time features for better performance and safety.
* Examples
#+begin_src bash :results verbatim :exports both :wrap src zig
cat examples/hello.zig
#+end_src

#+RESULTS:
#+begin_src zig
const std = @import("std");
const napi = @import("napi");

// Every napi module needs to call `registerModule` to register it with the N-API runtime.
comptime {
    napi.registerModule(init);
}

fn hello(env: napi.Env, who: napi.Value) !napi.Value {
    var buf: [64]u8 = undefined;
    const len = try who.getValueString(.utf8, &buf);
    const allocator = std.heap.page_allocator;
    const message = try std.fmt.allocPrint(allocator, "Hello {s}", .{buf[0..len]});
    defer allocator.free(message);

    return try env.createString(.utf8, message);
}

fn init(env: napi.Env, exports: napi.Value) !napi.Value {
    try exports.setNamedProperty(
        "hello",
        try env.createFunction(hello, null),
    );

    return exports;
}
#+end_src


#+begin_src bash :results verbatim :exports both :wrap src zig
cat examples/hello.js
#+end_src

#+RESULTS:
#+begin_src zig
const addon = require('../zig-out/lib/hello.node');
const assert = require('node:assert/strict');

assert.strictEqual('Hello Tom', addon.hello('Tom'));
assert.strictEqual('Hello Jack', addon.hello('Jack'));
#+end_src

More usages can be found in [[file:tests/][tests]] directory.
* Installation
With Zig's package manager, you can easily install zig-napi and use it in your Zig projects.
- First, run the following command in your terminal, replace =${COMMIT_ID}= with the commit ID you want to use.

  #+begin_src bash
zig fetch --save https://github.com/jiacai2050/zig-napi/archive/${COMMIT_ID}.zip
  #+end_src

- Then in your =build.zig=, you can add the following code to include the package:

  #+begin_src zig
const name = "napi-demo";
const addon = b.addLibrary(.{
    .name = name,
    .root_module = b.createModule(.{
        .root_source_file = b.path("src/root.zig"),
        .optimize = optimize,
        .target = target,
    }),
    .linkage = .dynamic,
});

const dep_napi = b.dependency("napi", .{});
addon.root_module.addImport("napi", dep_napi.module("napi"));
addon.linker_allow_shlib_undefined = true;
const install_lib = b.addInstallArtifact(addon, .{
    .dest_sub_path = name ++ ".node",
});
b.getInstallStep().dependOn(&install_lib.step);
  #+end_src

- Finally, require the addon in your Node.js code:
  #+begin_src javascript
const addon = require('./zig-out/lib/napi-demo.node');

// Do awesome thing with addon
  #+end_src

* License
This project is licensed under [[file:LICENSE][the MIT License]].
